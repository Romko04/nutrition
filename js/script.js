// Event listeners
new Swiper('.swiper', {
  slidesPerView: 1.5,
  centeredSlides: true,
  spaceBetween: 76,
  autoHeight: true
});

document.addEventListener('click', (e) => {
  if (e.target.classList.contains('program__list-item__btn')) {
    e.target.classList.toggle('active')
    let nextElement = e.target.nextElementSibling;
    if (nextElement) {
      nextElement.classList.toggle('active');
      nextElement.style.maxHeight = nextElement.classList.contains('active') ? nextElement.scrollHeight + 'px' : 0;
      nextElement.style.marginBottom = nextElement.classList.contains('active') ? 16 + 'px' : 0;
    }
  }
  if (e.target.classList.contains('anchor')) {
    anchorClick(e.target)
  }
  if (e.target.classList.contains('header__burger')) {
    toggleMenu()
  }
})


function anchorClick(e) {
  const activeAnchor = document.querySelector('.menu__link-active')
  activeAnchor.classList.remove('menu__link-active')
  e.classList.add('menu__link-active')
  if (menuBody.classList.contains('active')) {
    toggleMenu()
  }
  const blockId = e.getAttribute('href')
  document.querySelector('' + blockId).scrollIntoView({
    behavior: "smooth",
    block: "start",
    inline: "nearest"
  })
}


let form = document.querySelector('.feadback__form');
let instaInput = document.getElementById('insta');
let questionTextarea = document.getElementById('question');
let submitButton = document.querySelector('.form__btn');

form.addEventListener('submit', function (event) {
  event.preventDefault();

  let instaValue = instaInput.value;
  let questionValue = questionTextarea.value;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–æ–≤–∂–∏–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤
  if (questionValue.length <= 10) {
    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å —Ç–∞ –≤—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
    questionTextarea.classList.add('error');
    questionTextarea.nextElementSibling.innerText = '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è - 10';
  } else {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
    let currentDate = new Date();
    let formattedDate = currentDate.toLocaleString(); // —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    let telegramToken = '6144282446:AAEBydoJMTRovY3mTMwSXbv5OmgifWT2_28';
    let chatId = '-4165690602';

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    let message = 'Instagram –Ω—ñ–∫: ' + instaValue + '\n–ü–∏—Ç–∞–Ω–Ω—è: ' + questionValue + '\n–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ' + formattedDate;

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    submitButton.classList.add('active')
    sendTelegramMessage(telegramToken, chatId, message);
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞—Å—É –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
questionTextarea.addEventListener('input', function () {
  if (questionTextarea.classList.contains('error')) {
    questionTextarea.classList.remove('error');
    questionTextarea.nextElementSibling.innerText = '';
  }
});

function sendTelegramMessage(token, chatId, message) {
  let apiUrl = 'https://api.telegram.org/bot' + token + '/sendMessage';
  let data = {
    chat_id: chatId,
    text: message
  };

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetch –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
    .then(response => response.json())
    .then(data => {
      instaInput.value = '';
      questionTextarea.value = '';
      submitButton.nextElementSibling.innerText = '';
      submitButton.classList.remove('active');
      submitButton.classList.add('disabled');
      submitButton.disabled = true;
      submitButton.nextElementSibling.innerText = '–Ø –Ω–µ–≤–¥–æ–≤–∑—ñ –∑–≤—è–∂—É—Å—è –∑ –≤–∞–º–∏!';
      submitButton.nextElementSibling.style.color = '#FDC248'; // –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–ª—ñ—Ä, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    })
    .catch(error => {
      submitButton.nextElementSibling.innerText = '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢';
    });
}
